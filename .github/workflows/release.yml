name: Build and Release

on:
  workflow_run:
    workflows: ["test"]
    types:
      - completed

permissions:
  contents: write  # required for creating GitHub releases

jobs:
  build:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch =~ '^v[0-9]+\.[0-9]+\.[0-9]+$' &&
      github.event.workflow_run.head_commit.ref_type == 'tag'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'  # adjust if needed

      - name: Build binary
        run: |
          mkdir -p dist
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi
          binary="unused-node-exports-${{ matrix.goos }}-${{ matrix.goarch }}${ext}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags "-s -w" -o "dist/$binary" .

      - name: Check binary version matches tag
        run: |
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi
          binary="unused-node-exports-${{ matrix.goos }}-${{ matrix.goarch }}${ext}"
          cd dist
          BIN_VERSION=$(./"$binary" version
          TAG_VERSION="${GITHUB_REF##*/}"
          if [ "$BIN_VERSION" != "$TAG_VERSION" ]; then
            echo "Binary version '$BIN_VERSION' does not match tag '$TAG_VERSION'"
            exit 1
          fi
          cd ..

      - name: Compress binaries
        run: |
          cd dist
          for file in *; do
            if [[ "$file" == *.exe ]]; then
              zip "${file%.exe}.zip" "$file"
              rm "$file"
            else
              tar -czf "$file.tar.gz" "$file"
              rm "$file"
            fi
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

